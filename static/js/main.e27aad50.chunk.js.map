{"version":3,"sources":["components/Toolbar.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Toolbar","className","Footer","message","cardsLeft","App","state","wordList","correct","incorrect","componentDidMount","loadWords","disableBodyScroll","document","shuffle","concat","data","setState","resetScore","onSwipe","prevState","shift","onSwipeLeft","word","onSwipeRight","onDoubleTap","resetCards","renderCardStack","map","key","renderResults","length","this","onClick","addEndCard","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e27aad50.chunk.js","sourcesContent":["import React from 'react';\n\nconst Toolbar = () => {\n  return (\n    <div className=\"toolbar\">\n      <div className=\"toolbar__swipe-indicator\">← Keep Practicing</div>\n      <div className=\"toolbar__swipe-indicator\">Perfect →</div>\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React from 'react';\n\nconst Footer = ({ cardsLeft }) => {\n  let message;\n\n  switch (cardsLeft) {\n    case 1:\n      message = `${cardsLeft} card left`;\n      break;\n    case 0:\n      message = `🎉`;\n      break;\n    default:\n      message = `${cardsLeft} cards left`;\n  }\n\n  return (\n    <div className=\"footer\">\n      <div className=\"footer__cards-remaining\">{message}</div>\n      <footer className=\"footer__footer\">\n        <p>Made by Delaney's Dad</p>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport { Card, CardWrapper } from 'react-swipeable-cards';\nimport { disableBodyScroll } from 'body-scroll-lock';\nimport shuffle from 'shuffle-array';\nimport Toolbar from 'components/Toolbar';\nimport Footer from 'components/Footer';\nimport 'App.scss';\nimport data from './data.json';\n\nclass App extends Component {\n  state = {\n    wordList: [],\n    correct: [],\n    incorrect: [],\n  };\n\n  componentDidMount = () => {\n    this.loadWords();\n    disableBodyScroll(document);\n  };\n\n  loadWords = () => {\n    const wordList = shuffle([].concat(...data));\n    this.setState({ wordList });\n  };\n\n  resetScore = () => {\n    this.setState({ correct: [], incorrect: [] });\n  };\n\n  // Remove the top card from the deck.\n  onSwipe = () => {\n    this.setState(prevState => {\n      prevState.wordList.shift();\n      const wordList = [...prevState.wordList];\n      return { wordList };\n    });\n  };\n\n  // Incorrect response.\n  onSwipeLeft = word => {\n    this.setState({ incorrect: [...this.state.incorrect, word] });\n  };\n\n  // Correct response.\n  onSwipeRight = word => {\n    this.setState({ correct: [...this.state.correct, word] });\n  };\n\n  // Move current card to back of deck.\n  onDoubleTap = word => {\n    this.setState(prevState => {\n      prevState.wordList.shift();\n      const wordList = [...prevState.wordList, word];\n      return { wordList };\n    });\n  };\n\n  resetCards = () => {\n    this.loadWords();\n  };\n\n  renderCardStack = () => {\n    const cards = this.state.wordList.map(word => (\n      <Card\n        key={word}\n        onSwipe={this.onSwipe}\n        onSwipeLeft={this.onSwipeLeft}\n        onSwipeRight={this.onSwipeRight}\n        onDoubleTap={this.onDoubleTap}\n        data={word}\n      >\n        {word}\n      </Card>\n    ));\n\n    return cards;\n  };\n\n  renderResults = () => {\n    const { correct } = this.state;\n\n    return (\n      <div className=\"results\">\n        <h1>Score</h1>\n        <p>\n          <span className=\"results__correct\">{correct.length}</span>\n        </p>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.wordList.length < 1 && (\n          <button className=\"reset-cards\" onClick={() => this.resetCards()}>\n            Reset\n          </button>\n        )}\n        <Toolbar />\n        <CardWrapper addEndCard={() => this.renderResults()}>\n          {this.renderCardStack()}\n        </CardWrapper>\n        <Footer cardsLeft={this.state.wordList.length} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}